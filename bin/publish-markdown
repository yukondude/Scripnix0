#!/bin/bash
# $Id$
#
# Convert the given Markdown text file into print-ready HTML and PDF files using
# the supporting files from the specified style, or the default style if
# unspecified. Markdown source files should ideally use the .md.txt extension.
# The Markdown conversion tool must be installed, and for PDF generation, the 
# wkhtmltopdf tool is required. New styles can be created, using the default
# style (/etc/scripnix/style/default) as a template.
#
# This file is a part of Scripnix <http://scripnix.googlecode.com/>.
# Written in 2010 by Dave Rogers <yukondude-strudel-gmail-fullstop-com>.
# This script is released into the Public Domain.

source /usr/local/bin/bin.bash

check_arg_count ${0} ${#} 1 2 '[<style>] <Markdown-text-file>'

# Lots of things can go wrong, so check 'em all.
if [[ ${#} -eq 1 ]] ; then
    style_dir="${PUBLISH_STYLE_DIR}/default"
    markdown_source="${1}"
else
    style_dir="${PUBLISH_STYLE_DIR}/${1}"
    markdown_source="${2}"
fi

if [[ ! -d "${style_dir}" ]] ; then
    echo_err "Style directory ${style_dir} does not exist."
    exit 1
fi

if [[ ! -f "${markdown_source}" ]] ; then
    echo_err "Markdown text file ${source} does not exist."
    exit 1
fi

markdown_exists=$(which markdown)

if [[ -z "${markdown_exists}" ]] ; then
    echo_err "Markdown converter is not installed."
    echo_err "Visit http://daringfireball.net/projects/markdown/ to download."
    exit 1
fi

markdown_name=$(basename "${markdown_source}" .md.txt)
publish_dir=$(dirname "${markdown_source}")
html_work=$(mktemp)
markdown_work=$(mktemp)
scratch_in=$(mktemp)
scratch_out=$(mktemp)

# Write out the beginning of the HTML header.
if [[ -f "${style_dir}"/header-prefix.html ]] ; then
    cat "${style_dir}"/header-prefix.html >>"${html_work}"
fi

# Insert all CSS stylesheet files, in order.
for css in "${style_dir}"/style*.css ; do
    cat $css >>"${html_work}"
done

# Write out the rest of the HTML header.
if [[ -f "${style_dir}"/header-suffix.html ]] ; then
    cat "${style_dir}"/header-suffix.html >>"${html_work}"
fi

# Strip out any Unicode BOM prefix from the Markdown.
sed --expression '1s/^\xef\xbb\xbf//' "${markdown_source}" >"${markdown_work}"

# Run any optional pre-Markup content filters.
cat "${markdown_work}" >"${scratch_in}"
count=$(ls "${style_dir}"/pre-markdown*.awk 2>/dev/null | wc --lines)

if [[ "${count}" -ne 0 ]] ; then
    for awk in "${style_dir}"/pre-markdown*.awk; do
        awk --file "${awk}" --re-interval "${scratch_in}" >"${scratch_out}"
        cat "${scratch_out}" >"${scratch_in}"
    done
fi

cat "${scratch_in}" >"${markdown_work}"

# Write out the converted HTML.
markdown_switches=$(collect_switches "${style_dir}"/markdown.conf)
markdown ${markdown_switches} "${markdown_work}" >>"${html_work}"

# Write out the HTML footer.
if [[ -f "${style_dir}"/footer.html ]] ; then
    cat "${style_dir}"/footer.html >>"${html_work}"
fi

# Run any optional post-Markup content filters.
cat "${html_work}" >"${scratch_in}"
count=$(ls "${style_dir}"/post-markdown*.awk 2>/dev/null | wc --lines)

if [[ "${count}" -ne 0 ]] ; then
    for awk in "${style_dir}"/post-markdown*.awk; do
        awk --file "${awk}" --re-interval "${scratch_in}" >"${scratch_out}"
        cat "${scratch_out}" >"${scratch_in}"
    done
fi

cat "${scratch_in}" >"${html_work}"

# Use the <h1> text as the title, or the filename if it can't be found.
title=$(sed --regexp-extended --expression 's/<h1>(.+)<\/h1>/\1/p' --quiet "${html_work}")
title="${title:-$markdown_name}"

# Add an optional suffix to the generated filenames.
if [[ -f "${style_dir}"/suffix ]] ; then
    suffix=$(cat "${style_dir}"/suffix)
    suffix="-${suffix}"
else
    suffix=""
fi

# Replace any template title or year tags and write out the converted HTML.
year=$(date +%Y)
sed --regexp-extended --expression "s/@@@TITLE@@@/${title}/g" "${html_work}" |
    sed --regexp-extended --expression "s/@@@YEAR@@@/${year}/g" >"${publish_dir}/${markdown_name}${suffix}.html"

rm --force "${html_work}"
rm --force "${markdown_work}"
rm --force "${scratch_in}"
rm --force "${scratch_out}"

wkhtmltopdf_exists=$(which wkhtmltopdf)

if [[ -z "${wkhtmltopdf_exists}" ]] ; then
    echo_err "Wkhtmltopdf converter is not installed. Only HTML has been generated."
    exit 0
fi

# Convert generated HTML to PDF. The eval is needed to deal with quotes that
# might appear in wkhtmltopdf_switches.
wkhtmltopdf_switches=$(collect_switches "${style_dir}"/wkhtmltopdf.conf)
eval "wkhtmltopdf ${wkhtmltopdf_switches} \"${publish_dir}/${markdown_name}${suffix}.html\" \"${publish_dir}/${markdown_name}${suffix}.pdf\""
