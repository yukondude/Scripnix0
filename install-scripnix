#!/bin/bash
#
# "Install" Scripnix by setting up the systemwide configuration directory and
# files. Permissions are as restrictive as possible. The script can be re-run
# without altering existing files or directories, but permissions will be reset.
#
# This file is a part of Scripnix <https://github.com/yukondude/Scripnix/>.
# Written in 2010 by Dave Rogers <yukondude.com>
# This is free and unencumbered software released into the public domain.
# Refer to the LICENCE file for the not-so-fine print.

scriproot="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source $scriproot/sbin.bash

config_path=/etc/scripnix
config_readme_file="${config_path}/README"
bin_config_file="${config_path}/conf.bash"
sbin_config_file="${config_path}/sconf.bash"
archive_exclusion_file="${config_path}/archive-exclusions"
archive_paths_directory="${config_path}/archive-paths"
archive_paths_readme_file="${archive_paths_directory}/README"
publish_style_directory="${config_path}/style"
publish_default_style_directory="${publish_style_directory}/default"

host=$(echo ${HOSTNAME:-local} | tr '[:upper:]' '[:lower:]')

# Create the systemwide configuration directory.
if [[ ! -d "${config_path}" ]] ; then
    mkdir "${config_path}"
fi

chmod a=rwx,g=rxs,o=rx "${config_path}"

if [[ ! -f "${config_readme_file}" ]] ; then
    echo "Systemwide configuration settings for the Scripnix project." >"${config_readme_file}"
    echo "[http://code.google.com/p/scripnix/]" >>"${config_readme_file}"
fi

chmod ago=r "${config_readme_file}"

# Create the systemwide configuration override files with sample settings.
if [[ ! -f "${bin_config_file}" ]] ; then
    echo "# Systemwide user account configuration overrides for conf.bash." >"${bin_config_file}"
    echo "# Account-specific settings can be made in ~/.scripnix/conf.bash." >>"${bin_config_file}"
    echo 'FIND_PATH_EXCLUDE="${FIND_PATH_EXCLUDE} -or ( -path /media -or -path /mnt ) -prune"' >>"${bin_config_file}"

fi

chmod a=rw,go=r "${bin_config_file}"

if [[ ! -f "${sbin_config_file}" ]] ; then
    echo "# Systemwide root account configuration overrides for sconf.bash." >"${sbin_config_file}"
    echo "MYSQL_DUMP_FILE='${host}-mysql-dump.tar'" >>"${sbin_config_file}"
    echo "PGSQL_DUMP_FILE='${host}-pgsql-dump.tar'" >>"${sbin_config_file}"
    echo "SVN_REPOSITORIES_DUMP_FILE='${host}-svn-dump.tar'" >>"${sbin_config_file}"
    echo "SVN_REALM='${host}'" >>"${sbin_config_file}"
fi

chmod a=rw,g=r,o= "${sbin_config_file}"

# Create the systemwide archive script exclusion file and path directory.
if [[ ! -f "${archive_exclusion_file}" ]] ; then
    echo "/var/archive" >"${archive_exclusion_file}"
fi

chmod a=rw,g=r,o= "${archive_exclusion_file}"

# Create the systemwide archive paths with sample directories.
if [[ ! -d "${archive_paths_directory}" ]] ; then
    mkdir "${archive_paths_directory}"
    cd "${archive_paths_directory}"
    ln -s /etc/ "${host}-etc"
    ln -s /home/ "${host}-home"
    ln -s /root/ "${host}-root"
    ln -s /var/log/ "${host}-var-log"
    ln -s /var/mail/ "${host}-var-mail"
    ln -s /var/spool/ "${host}-var-spool"
    cd - >/dev/null
fi

chmod a=rwx,g=rxs,o= "${archive_paths_directory}"

if [[ ! -f "${archive_paths_readme_file}" ]] ; then
    echo "Systemwide Scripnix archive script backup directories." >"${archive_paths_readme_file}"
    echo "Backups of the symlinked directories will be named using the link alias." >>"${archive_paths_readme_file}"
fi

chmod ag=r,o= "${archive_paths_readme_file}"

# Create a more familiar name for the control-service script.
if [[ ! -h "${sbin_dir}/service" ]] ; then
    cd "${sbin_dir}"
    ln -s "${sbin_dir}/control-service" service
fi

# Create the default publishing style files.
if [[ ! -d "${publish_style_directory}" ]] ; then
    mkdir "${publish_style_directory}"
fi

if [[ ! -d "${publish_default_style_directory}" ]] ; then
    mkdir "${publish_default_style_directory}"
    cd "${publish_default_style_directory}"
    echo '<!DOCTYPE html><html lang="en"><head><title>@@@TITLE@@@</title><meta charset="utf-8"><style>' >header-prefix.html
    echo '</style></head><body><!-- BEGIN Markdown content. -->' >header-suffix.html
    echo '<!-- END Markdown content. --></body></html>' >footer.html
    echo 'body { font-family: helvetica,arial,sans-serif; }' >style.css
    echo -e "--page-size Letter\n--quiet" >wkhtmltopdf.conf
    echo '--html4tags' >markdown.conf
    echo '{print}' >pre-markdown.awk
    echo '{print}' >post-markdown.awk
    cd - >/dev/null
fi
